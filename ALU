module alu(a,b,cin,s,cout,no_op,p,sel);
parameter N=4;
input [N-1:0] a,b;
input cin;
input [1:0] sel;
output [N-1:0] s;
output cout;
output reg no_op;
output reg [(2*N)-1:0] p;

rippleadd a1(a,b,cin,s,cout,sel);//since no seperate module can be instantiated inside an always block

always@(*)
begin
	case(sel)
	2'b00: begin assign p=0;assign no_op=1'b0;end
	2'b01: begin assign p= a*b;end
	2'b10: begin assign p=a/b;end
	2'b11: begin assign no_op=1'b1;end 
	endcase
end
endmodule

module add(input a,input b,input cin,output s,output cout);
assign s=a^b^cin;
assign cout=(a&b)|(b&cin)|(cin&a);
endmodule
module rippleadd(input [3:0] a, input [3:0] b,input cin,output [3:0] s,output cout,input [1:0] sel);
wire [3:0] sumout;
wire [3:0] carryout;
add fa1(a[0],b[0],cin, sumout[0],carryout[0]);
add fa2(a[1],b[1], carryout [0], sumout [1], carryout [1]);
add fa3(a[2],b[2], carryout [1], sumout [2], carryout [2]);
add fa4(a[3],b[3], carryout [2], sumout [3], carryout [3]);
assign s=(sel==2'b00)?sumout:0;//to nullify addition operation in case op code is 00
assign cout=(sel==2'b00)?carryout[3]:0;//to nullify carry incase op code is 00
endmodule
